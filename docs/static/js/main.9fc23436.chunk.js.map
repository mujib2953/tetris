{"version":3,"sources":["images/bg.png","components/styles/StyledCell.js","utils/tetrominos.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","utils/gameHelpers.js","components/styles/StyledTetris.js","hooks/usePlayer.js","hooks/useStage.js","components/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js"],"names":["module","exports","StyledCell","styled","div","props","color","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","randomTetrominos","Math","floor","random","length","React","memo","StyledStage","height","width","Stage","stage","map","row","cell","x","key","StyledDisplay","gameOver","Disaplay","text","StyledStartButton","button","StartButton","callback","onClick","createStage","Array","from","fill","checkCollision","player","moveX","moveY","y","tetrominos","pos","StyledTetrisWrapper","bgImage","StyledTetris","useStage","resetPlayer","useState","setStage","rowCleared","setRowCleared","useEffect","updateStage","prevStage","newStage","forEach","rows","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","direction","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","offset","usePlayer","updatePlayerPos","playerRotate","rowsCleared","score","setScore","setRows","level","setLevel","linePoints","calcScore","useGameStatus","moverPlayer","dir","resetEveryThing","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","keyUp","Display","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9fc23436.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","import styled from \"styled-components\";\r\n\r\nexport const StyledCell = styled.div`\r\n    width: auto;\r\n    background: rgba(${props => props.color}, 0.8);\r\n    border: ${props => (props.type === 0 ? \"0px solid\" : \"4px solid\")}\r\n    border-bottom-color: rgba(${props => props.color}, 0.1);\r\n    border-right-color: rgba(${props => props.color}, 1);\r\n    border-top-color: rgba(${props => props.color}, 1);\r\n    border-left-color: rgba(${props => props.color}, 0.3);\r\n`\r\n","export const TETROMINOS = {\r\n    0: {\r\n        shape: [[0]],\r\n        color: \"0, 0, 0\"\r\n    },\r\n    I: {\r\n        shape: [\r\n            [0, \"I\", 0, 0],\r\n            [0, \"I\", 0, 0],\r\n            [0, \"I\", 0, 0],\r\n            [0, \"I\", 0, 0]\r\n        ],\r\n        color: \"80, 227, 230\"\r\n    },\r\n    J: {\r\n        shape: [\r\n            [0, \"J\", 0],\r\n            [0, \"J\", 0],\r\n            [\"J\", \"J\", 0],\r\n        ],\r\n        color: \"36, 95, 123\"\r\n    },\r\n    L: {\r\n        shape: [\r\n            [0, \"L\", 0],\r\n            [0, \"L\", 0],\r\n            [0, \"L\", \"L\"],\r\n        ],\r\n        color: \"223, 173, 36\"\r\n    },\r\n    O: {\r\n        shape: [\r\n            [\"O\", \"O\"],\r\n            [\"O\", \"O\"]\r\n        ],\r\n        color: \"223, 217, 36\"\r\n    },\r\n    S: {\r\n        shape: [\r\n            [0, \"S\", \"S\"],\r\n            [\"S\", \"S\", 0],\r\n            [0, 0, 0],\r\n        ],\r\n        color: \"48, 211, 56\"\r\n    },\r\n    T: {\r\n        shape: [\r\n            [0, 0, 0],\r\n            [\"T\", \"T\", \"T\"],\r\n            [0, \"T\", 0]\r\n        ],\r\n        color: \"132, 61, 198\"\r\n    },\r\n    Z: {\r\n        shape: [\r\n            [\"Z\", \"Z\", 0],\r\n            [0, \"Z\", \"Z\"],\r\n            [0, 0, 0],\r\n        ],\r\n        color: \"227, 78, 78\"\r\n    }\r\n};\r\n\r\nexport const randomTetrominos = () => {\r\n    const tetrominos = \"IJLOSTZ\";\r\n    const randomTetrominos = tetrominos[Math.floor( Math.random() * tetrominos.length )];\r\n\r\n    return TETROMINOS[randomTetrominos];\r\n}\r\n","import React from \"react\";\r\n\r\nimport { StyledCell } from \"./styles/StyledCell\";\r\nimport { TETROMINOS } from \"../utils/tetrominos\";\r\n\r\nconst Cell = ({ type }) => (\r\n    <StyledCell type={type} color={TETROMINOS[type].color} />\r\n);\r\n\r\nexport default React.memo(Cell);\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStage = styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(\r\n        ${props => props.height},\r\n        calc(25vw / ${props => props.width})\r\n    );\r\n    grid-template-columns: repeat(${props => props.width}, 1fr);\r\n    grid-gap: 1px;\r\n    border: 2px solid #333;\r\n    width: 100%;\r\n    max-width: 25vw;\r\n    background: #111;\r\n`","import React from \"react\";\r\n\r\nimport Cell from \"./Cell\";\r\n\r\nimport { StyledStage } from \"./styles/StyledStage\";\r\n\r\nconst Stage = ({ stage }) => (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n        {\r\n            stage.map(row => row.map((cell, x)=> <Cell key={x} type={cell[0]} />))\r\n        }\r\n    </StyledStage>\r\n);\r\n\r\nexport default Stage;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledDisplay = styled.div`\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    border: 4px solid #333;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    color: ${props => (props.gameOver ? \"#F00\" : \"#999\")}\r\n    background: #000;\r\n    font-family: Pixel, Arial, Helvatica, sans-serif;\r\n    font-size: 0.8rem;\r\n`\r\n","import React from \"react\";\r\n\r\nimport { StyledDisplay } from \"./styles/StyledDisplay\";\r\n\r\nconst Disaplay = ({ gameOver, text }) => (\r\n    <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n);\r\n\r\nexport default Disaplay;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStartButton = styled.button`\r\n    box-sizing: border-box;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    border: none;\r\n    color: #FFF;\r\n    background: #333;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 1rem;\r\n    outline: none;\r\n    cursor: pointer;\r\n`\r\n","import React from \"react\";\r\n\r\nimport { StyledStartButton } from \"./styles/StyledStartButton\";\r\n\r\nconst StartButton = ({ callback }) => (\r\n    <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n);\r\n\r\nexport default StartButton;\r\n","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () => \r\n    Array.from(Array(STAGE_HEIGHT), () => \r\n        new Array(STAGE_WIDTH).fill([0, \"clear\"])\r\n    );\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n\r\n    for( let y = 0; y < player.tetrominos.length; y++) {\r\n        for( let x = 0; x < player.tetrominos[y].length; x++ ) {\r\n\r\n            if (player.tetrominos[y][x] !== 0) {\r\n                if (\r\n                    // --- checking height of the stage\r\n                    !stage[y + player.pos.y + moveY] ||\r\n\r\n                    // --- checking width of stage\r\n                    !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n\r\n                    // --- checking if we are colliding with other tetrominals\r\n                    stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== \"clear\"\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nimport bgImage from \"../../images/bg.png\";\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: url(${bgImage}) #000;\r\n    background-size: cover;\r\n    overflow: hidden;\r\n`\r\n\r\nexport const StyledTetris = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    padding: 40px;\r\n    margin: 0 auto;\r\n    max-width: 900px;\r\n\r\n    aside {\r\n        width: 100%;\r\n        max-width: 200px;\r\n        display: block;\r\n        padding: 0 20px;\r\n    }\r\n`","import { useState, useCallback } from \"react\";\r\n\r\nimport { TETROMINOS, randomTetrominos } from \"../utils/tetrominos\";\r\nimport { STAGE_WIDTH, checkCollision } from \"../utils/gameHelpers\";\r\n\r\nexport const usePlayer = () => {\r\n\r\n    const [player, setPlayer] = useState({\r\n        pos: { x: 0, y: 0 },\r\n        tetrominos: TETROMINOS[0].shape,\r\n        collided: false,\r\n    });\r\n\r\n    const rotate = (matrix, direction) => {\r\n        const rotatedTetro = matrix.map((_, index) => \r\n            matrix.map(col => col[index]),\r\n        );\r\n\r\n        if (direction > 0) {\r\n            return rotatedTetro.map(row => row.reverse());\r\n        }\r\n\r\n        return rotatedTetro.reverse();\r\n    }\r\n\r\n    const playerRotate = (stage, direction) => {\r\n        const clonedPlayer = {...player};\r\n\r\n        clonedPlayer.tetrominos = rotate(clonedPlayer.tetrominos, direction);\r\n\r\n        const pos = clonedPlayer.pos.x;\r\n        let offset = 1;\r\n        while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n            clonedPlayer.pos.x += offset;\r\n\r\n            offset = -(offset + (offset > 0 ? 1 : -1));\r\n\r\n            if (offset > clonedPlayer.tetrominos[0].length) {\r\n                rotate(clonedPlayer.tetrominos, direction);\r\n                clonedPlayer.pos.x = pos;\r\n                return;\r\n            }\r\n        }\r\n\r\n        setPlayer(clonedPlayer);\r\n    }\r\n\r\n    const updatePlayerPos = ({ x, y, collided }) => {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos: {\r\n                x: (prev.pos.x += x),\r\n                y: (prev.pos.y += y),\r\n            },\r\n            collided,\r\n        }));\r\n    }\r\n\r\n    const resetPlayer = useCallback(() => {\r\n        setPlayer({\r\n            pos: {\r\n                x: STAGE_WIDTH / 2 - 2,\r\n                y: 0\r\n            },\r\n            tetrominos: randomTetrominos().shape,\r\n            collided: false\r\n        })\r\n    }, []);\r\n    \r\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport { createStage } from \"../utils/gameHelpers\";\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n\r\n    const [stage, setStage] = useState(createStage());\r\n    const [rowCleared, setRowCleared] = useState(0);\r\n\r\n    useEffect(() => {\r\n\r\n        setRowCleared(0);\r\n\r\n        const sweepRows = newStage =>\r\n            newStage.reduce((ack, row) => {\r\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n                    setRowCleared(prev => prev + 1);\r\n                    ack.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\r\n                    return ack;\r\n                }\r\n\r\n                ack.push(row);\r\n\r\n                return ack;\r\n            }, []);\r\n\r\n        const updateStage = (prevStage) => {\r\n            // --- flush the stage\r\n            const newStage = prevStage.map(row =>\r\n                row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\r\n            );\r\n\r\n            // --- Drawing tetrominos\r\n            player.tetrominos.forEach((rows, y) => {\r\n                rows.forEach((value, x) => {\r\n                    if (value !== 0) {\r\n                        newStage[y + player.pos.y][x + player.pos.x] = [\r\n                            value,\r\n                            `${player.collided ? \"merged\" : \"clear\"}`\r\n                        ]\r\n                    }\r\n                });\r\n            });\r\n\r\n            // --- checking collision\r\n            if (player.collided) {\r\n                resetPlayer();\r\n                return sweepRows(newStage);\r\n            }\r\n\r\n            return newStage;\r\n        }\r\n\r\n        setStage(prev => updateStage(prev));\r\n\r\n    } , [player, resetPlayer]);\r\n\r\n    return [stage, setStage, rowCleared];\r\n}\r\n\r\n","import React, { useState } from \"react\";\r\n\r\n// --- components\r\nimport Stage from \"./Stage\";\r\nimport Display from \"./Display\";\r\nimport StartButton from \"./StartButton\";\r\n\r\n// --- utils\r\nimport { createStage, checkCollision } from \"../utils/gameHelpers\";\r\n\r\n// --- styled\r\nimport { StyledTetrisWrapper, StyledTetris } from \"./styles/StyledTetris\";\r\n\r\n// --- hooks\r\nimport { useInterval } from \"../hooks/useInterval\";\r\nimport { usePlayer } from \"../hooks/usePlayer\";\r\nimport { useStage } from \"../hooks/useStage\";\r\nimport { useGameStatus } from \"../hooks/useGameStatus\";\r\n\r\nconst Tetris = () => {\r\n    \r\n    // --- setting local state\r\n    const [dropTime, setDropTime] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    \r\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n    const [stage, setStage, rowCleared] = useStage(player, resetPlayer);\r\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowCleared);\r\n\r\n    const moverPlayer = (dir) => {\r\n        if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n            updatePlayerPos({ x: dir, y: 0 });\r\n        }\r\n    }\r\n    \r\n    const startGame = () => {\r\n        resetEveryThing();\r\n    }\r\n\r\n    const resetEveryThing = () => {\r\n        setStage(createStage());\r\n        resetPlayer();\r\n        setGameOver(false);\r\n        setDropTime(1000);\r\n        setScore(0);\r\n        setLevel(0);\r\n        setRows(0);\r\n    }\r\n    \r\n    const drop = () => {\r\n\r\n        // --- Increase level when player has cleared 10 rows\r\n        if (rows > (level + 1) * 10) {\r\n            setLevel(prev => prev + 1);\r\n\r\n            // --- also increase\r\n            setDropTime(1000 / (level + 1) + 200);\r\n        }\r\n\r\n        if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n            updatePlayerPos({ x: 0, y: 1, collided: false });\r\n        } else {\r\n            \r\n            if (player.pos.y < 1) {\r\n                // --- Game-over\r\n                setDropTime(null);\r\n                setGameOver(true);\r\n            } \r\n            updatePlayerPos({ x: 0, y: 0, collided: true });\r\n        }\r\n    }\r\n\r\n    const keyUp = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            switch (keyCode) {\r\n                case 40:\r\n                    // --- Down-Arrow-Key\r\n                    setDropTime(1000 / (level + 1) + 200);\r\n                    break;\r\n            \r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    const dropPlayer = () => {\r\n        setDropTime(null);\r\n        drop();\r\n    }\r\n\r\n    const move = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n\r\n            switch(keyCode) {\r\n                case 37:\r\n                    // --- Left-Arrow-Key\r\n                    moverPlayer(-1);\r\n                    break;\r\n                case 38:\r\n                    // --- Up-Arrow-Key\r\n                    playerRotate(stage, 1);\r\n                    break;\r\n                case 39:\r\n                    // --- Right-Arrow-Key\r\n                    moverPlayer(1);\r\n                    break;\r\n                case 40:\r\n                    // --- Down-Arrow-Key\r\n                    dropPlayer();\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    useInterval(() => {\r\n        drop();\r\n    }, dropTime);\r\n\r\n\r\n    return (\r\n        <StyledTetrisWrapper\r\n            role=\"button\"\r\n            tabIndex=\"0\"\r\n            onKeyDown={(e) => move(e)}\r\n            onKeyUp={(e) => keyUp(e)}\r\n        >\r\n            <StyledTetris>\r\n                <Stage stage={stage} />\r\n                <aside>\r\n                    {\r\n                        gameOver ? (\r\n                            <Display gameOver={gameOver} text=\"Game Over !!!\" />\r\n                        ) : (\r\n                            <div>\r\n                                <Display text={`Score: ${score}`} />\r\n                                <Display text={`Rows: ${rows}`} />\r\n                                <Display text={`Levels: ${level}`} />\r\n                            </div>\r\n                        )\r\n                    }\r\n                    \r\n                    <StartButton callback={startGame} />\r\n                </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n    );\r\n}\r\n\r\nexport default Tetris;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n    \r\n    const [score, setScore] = useState(0);\r\n    const [rows, setRows] = useState(0);\r\n    const [level, setLevel] = useState(0);\r\n    \r\n\r\n    const linePoints = [40, 100, 300, 1200];\r\n\r\n    const calcScore = useCallback(() => {\r\n        if (rowsCleared > 0) {\r\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n            setRows(prev => prev + rowsCleared);\r\n        }\r\n    }, [linePoints, rowsCleared, level]);\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, score]);\r\n\r\n    return [score, setScore, rows, setRows, level, setLevel];\r\n}\r\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n\tconst savedCallback = useRef();\n\t// Remember the latest callback.\n\tuseEffect(() => {\n\t\tsavedCallback.current = callback;\n\t}, [callback]);\n\n\t// Set up the interval.\n\tuseEffect(() => {\n\t\tfunction tick() {\n\t\t\tsavedCallback.current();\n\t\t}\n\t\tif (delay !== null) {\n\t\t\tconst id = setInterval(tick, delay);\n\t\t\treturn () => {\n\t\t\t\tclearInterval(id);\n\t\t\t};\n\t\t}\n\t}, [delay]);\n}\n","import React from 'react';\nimport './App.css';\nimport Tetris from \"./components/Tetris\";\n\nconst App = () => (\n\t<div className=\"App\">\n\t\t<Tetris />\n\t</div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}